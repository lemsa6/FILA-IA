version: '3.8'

services:
  saas-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        user: www-data
        uid: 1000
    container_name: saas-api
    volumes:
      - ./:/var/www/html
    networks:
      - saas-network
      - fila-network  # Conecta à rede do FILA-IA para acessar o Redis
    depends_on:
      - saas-db
    restart: unless-stopped

  saas-nginx:
    image: nginx:stable-alpine
    container_name: saas-nginx
    ports:
      - 8080:80  # Porta diferente do FILA-IA para evitar conflitos
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - saas-network
    depends_on:
      - saas-api
    restart: unless-stopped

  saas-db:
    image: mysql:8.0
    container_name: saas-db
    environment:
      MYSQL_DATABASE: saas_whatsapp
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: saas
      MYSQL_PASSWORD: saas
    ports:
      - 3307:3306  # Porta diferente do FILA-IA para evitar conflitos
    volumes:
      - saas-mysql-data:/var/lib/mysql
    networks:
      - saas-network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'saas', '-psaas']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  saas-websockets:
    build:
      context: .
      dockerfile: ./docker/websockets/Dockerfile
    container_name: saas-websockets
    volumes:
      - ./:/var/www/html
    ports:
      - 6001:6001
    networks:
      - saas-network
      - fila-network  # Conecta à rede do FILA-IA para acessar o Redis
    depends_on:
      - saas-api
      - saas-db
    restart: unless-stopped

# Não criamos um novo Redis, vamos usar o existente do FILA-IA (fila-redis)
# O container fila-redis já está exposto na porta 6379

volumes:
  saas-mysql-data:

networks:
  saas-network:
    driver: bridge
  fila-network:
    external: true
    name: fila-ia_fila-network  # Nome correto da rede existente 